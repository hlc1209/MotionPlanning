// Generated by gencpp from file planner/manager_msgs.msg
// DO NOT EDIT!


#ifndef PLANNER_MESSAGE_MANAGER_MSGS_H
#define PLANNER_MESSAGE_MANAGER_MSGS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace planner
{
template <class ContainerAllocator>
struct manager_msgs_
{
  typedef manager_msgs_<ContainerAllocator> Type;

  manager_msgs_()
    : flag(false)
    , radius(0.0)
    , obs_x(0.0)
    , obs_y(0.0)
    , agent_x(0.0)
    , agent_y(0.0)  {
    }
  manager_msgs_(const ContainerAllocator& _alloc)
    : flag(false)
    , radius(0.0)
    , obs_x(0.0)
    , obs_y(0.0)
    , agent_x(0.0)
    , agent_y(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _flag_type;
  _flag_type flag;

   typedef double _radius_type;
  _radius_type radius;

   typedef double _obs_x_type;
  _obs_x_type obs_x;

   typedef double _obs_y_type;
  _obs_y_type obs_y;

   typedef double _agent_x_type;
  _agent_x_type agent_x;

   typedef double _agent_y_type;
  _agent_y_type agent_y;




  typedef boost::shared_ptr< ::planner::manager_msgs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planner::manager_msgs_<ContainerAllocator> const> ConstPtr;

}; // struct manager_msgs_

typedef ::planner::manager_msgs_<std::allocator<void> > manager_msgs;

typedef boost::shared_ptr< ::planner::manager_msgs > manager_msgsPtr;
typedef boost::shared_ptr< ::planner::manager_msgs const> manager_msgsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planner::manager_msgs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planner::manager_msgs_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace planner

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'planner': ['/home/wall-e/Terry_ws/src/planner/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::planner::manager_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planner::manager_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planner::manager_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planner::manager_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner::manager_msgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner::manager_msgs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planner::manager_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ac5a6f3bc967fa7c59d9fce13690555f";
  }

  static const char* value(const ::planner::manager_msgs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xac5a6f3bc967fa7cULL;
  static const uint64_t static_value2 = 0x59d9fce13690555fULL;
};

template<class ContainerAllocator>
struct DataType< ::planner::manager_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planner/manager_msgs";
  }

  static const char* value(const ::planner::manager_msgs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planner::manager_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# this is a msg from the manager\n\
bool flag\n\
float64 radius\n\
float64 obs_x\n\
float64 obs_y\n\
float64 agent_x\n\
float64 agent_y\n\
";
  }

  static const char* value(const ::planner::manager_msgs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planner::manager_msgs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.flag);
      stream.next(m.radius);
      stream.next(m.obs_x);
      stream.next(m.obs_y);
      stream.next(m.agent_x);
      stream.next(m.agent_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct manager_msgs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planner::manager_msgs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planner::manager_msgs_<ContainerAllocator>& v)
  {
    s << indent << "flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flag);
    s << indent << "radius: ";
    Printer<double>::stream(s, indent + "  ", v.radius);
    s << indent << "obs_x: ";
    Printer<double>::stream(s, indent + "  ", v.obs_x);
    s << indent << "obs_y: ";
    Printer<double>::stream(s, indent + "  ", v.obs_y);
    s << indent << "agent_x: ";
    Printer<double>::stream(s, indent + "  ", v.agent_x);
    s << indent << "agent_y: ";
    Printer<double>::stream(s, indent + "  ", v.agent_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNER_MESSAGE_MANAGER_MSGS_H
